// js/algorithms.js

/**
 * Scheduling Algorithms Module
 * Interfaces with the Web Worker to perform scheduling computations.
 */

let scheduleWorker;

/**
 * Initialize the Web Worker.
 */
function initializeWorker() {
    if (window.Worker) {
        scheduleWorker = new Worker('js/worker.js');

        scheduleWorker.onmessage = function(event) {
            const { type, schedule, message } = event.data;

            switch(type) {
                case 'scheduleGenerated':
                    handleScheduleGenerated(schedule);
                    break;
                case 'error':
                    showAlert(message);
                    break;
                default:
                    console.warn(`Unknown message type from worker: ${type}`);
            }
        };

        scheduleWorker.onerror = function(error) {
            console.error('Worker Error:', error);
            showAlert('An error occurred in the scheduling worker.');
        };
    } else {
        showAlert('Web Workers are not supported in your browser.');
    }
}

/**
 * Trigger the schedule generation using the selected algorithm.
 * @param {string} algorithm - The algorithm to use ('greedy' or 'simulatedAnnealing').
 */
function generateSchedule(algorithm) {
    if (!scheduleWorker) {
        showAlert('Scheduling worker is not initialized.');
        return;
    }

    const numRounds = getNumberOfRounds();
    const matchesPerRound = getMatchesPerRound();
    const players = getAllPlayers();

    if (players.length < 2) {
        showAlert('At least two players are required to generate a schedule.');
        return;
    }

    const payload = {
        algorithm,
        players,
        numRounds,
        matchesPerRound
    };

    scheduleWorker.postMessage({ type: 'generateSchedule', payload });

    // Optionally, show a loading indicator
    showLoadingIndicator(true);
}

/**
 * Handle the schedule generated by the worker.
 * @param {Object} schedule - The generated schedule.
 */
function handleScheduleGenerated(schedule) {
    // Update the UI with the new schedule
    populateSchedule(schedule);

    // Hide the loading indicator
    showLoadingIndicator(false);

    // Save the schedule to localStorage
    saveSchedule(schedule);

    // Push to undo stack
    pushToUndoStack(schedule);

    // Update the interaction matrix
    updateMatrix();
}

/**
 * Populate the schedule container with the generated schedule.
 * @param {Object} schedule 
 */
function populateSchedule(schedule) {
    const scheduleContainer = document.getElementById('scheduleContainer');
    scheduleContainer.innerHTML = ''; // Clear existing schedule

    for (const round in schedule) {
        const roundDiv = createElement('div', ['round']);
        roundDiv.innerHTML = `<h3><i class="fas fa-flag icon"></i> ${round}</h3>`;

        schedule[round].forEach(match => {
            const matchDiv = createElement('div', ['match']);

            const teamADiv = createElement('div', ['team'], {
                'data-round': round,
                'data-match': match.match,
                'data-team': 'A'
            });
            teamADiv.textContent = match.teamA || '';

            const vsDiv = createElement('div', ['vs']);
            vsDiv.textContent = 'VS';

            const teamBDiv = createElement('div', ['team'], {
                'data-round': round,
                'data-match': match.match,
                'data-team': 'B'
            });
            teamBDiv.textContent = match.teamB || '';

            matchDiv.appendChild(teamADiv);
            matchDiv.appendChild(vsDiv);
            matchDiv.appendChild(teamBDiv);

            roundDiv.appendChild(matchDiv);
        });

        scheduleContainer.appendChild(roundDiv);
    }

    // Re-initialize drag and drop for the new schedule
    initializeDragAndDrop();
}

/**
 * Get the number of rounds from the UI or settings.
 * @returns {number}
 */
function getNumberOfRounds() {
    // Implement based on your UI, e.g., a settings panel
    // For demonstration, we'll return a fixed number
    return 3;
}

/**
 * Get the number of matches per round from the UI or settings.
 * @returns {number}
 */
function getMatchesPerRound() {
    // Implement based on your UI, e.g., a settings panel
    // For demonstration, we'll return a fixed number
    return 3;
}

/**
 * Retrieve all players from the player management module.
 * @returns {Array}
 */
function getAllPlayers() {
    // Assuming 'players' is a global variable or accessible here
    return players;
}

/**
 * Show or hide a loading indicator.
 * @param {boolean} show 
 */
function showLoadingIndicator(show) {
    const loader = document.getElementById('loader');
    if (loader) {
        loader.style.display = show ? 'block' : 'none';
    }
}
